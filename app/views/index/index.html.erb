<script>

    var all_time = [];
    <% @repositories.each do |r| %>
      var entries = <%= r.js_timeseries.to_json %>;
      all_time.push({ label: "<%= r.name %>", data: entries });
    <% end %>

  function repo_is_selected(repo) {
    var selected = [];
    jQuery.each($('input:[name="repo"]:checked'), function(index, input) {
      selected.push(input.value);
    });

    len =  jQuery.grep(selected, function(n,i) {
       return repo == n }).length;

    return len > 0;
  }

  function show_since(time) {
    dataset = [];

    for(i = 0; i < all_time.length; i++){
      if(repo_is_selected(all_time[i]['label']) ){
        entries = [];
        for(j = 0; j < all_time[i]['data'].length; j++) {
          datapoint = all_time[i]['data'][j];
          if(datapoint[0] > time) {
            entries.push(datapoint);
          }
        }
        dataset.push({ 'label': all_time[i]['label'],
                       'data': entries });
      }
    }

    show_graph(dataset);
  }

  function show_graph(dataset) {
    for (var i=0;i<dataset.length;i++) {
      var data = dataset[i].data
        , current = 0
        ;
      for (var x=0;x<data.length;x++) {
        if (data[x][1] && data[x][1] > (0.15 * current)) {
          current = data[x][1]
        } else {
          data[x][1] = current
        }
      }
    }

    $.plot($("#count-graph"), dataset, {
                              series: { lines: { show: true },
                                        points: { show: true,
                                                  radius: 1 }},
                              xaxis: { mode: "time" },
                              legend: { position: "nw" } });

  }


  $(document).ready(function(){
    start = $('input:[name="start"]:checked').val();
    show_since(start);

    $("input").click(function(event) {
      start = $('input:[name="start"]:checked').val();
      show_since(start);
    });

  });
</script>
<style>
table.module-data {
    width: 750px;
    margin: auto;
    margin-top: 30px;
    margin-bottom: 30px;
}

.module-data td {
    text-align: center;
}

td.left {
    text-align: left;
}

td.right,th.right {
    text-align: right;
}

#graph-center {
    margin: auto;
    width: 770px;
}

#graph-display {
    position: relative;
    height: 400px;
}

#count-graph {
    float: left;
    width: 550px;
    height: 350px;
}

#content-control {
    float: right;
    padding-left: 15px;
}

#time-controls {
    float: left;
    clear: left;
    padding-top: 10px;
    width: 600px;

}

.controls ul {
    padding: 0px;
}

.controls li {
    list-style-type: none;
}

.controls li.list_header {
    margin: 0px 0px 5px 15px;
    font-weight: bold;
}

.horizontal li {
    margin-left: 5px;
    display: inline;
}

</style>
<h1>Module Counts</h1>
<div id="graph-center">
<div id="graph-display">
<form id="graph">
<div id="count-graph"></div>
<div id="content-control" class="vertical controls">
  <ul>
  <li class="list_header">Include</li>

    <% @repositories.each do |r| %>
  <li> <input type="checkbox" name="repo" value="<%= r.name %>"
     <% if r.graph %>checked<% end %>> <%= r.name %></li>
    <% end %>
  </ul>
</div>
<div id="time-controls" class="horizontal controls">
  <ul>
    <li class="list_header">time period</li>
    <% if Count.earliest.record_date < Time.now - 1.year %>
      <% all_time_checked = '' %>
      <% last_year_checked = 'checked' %>
    <% else %>
      <% all_time_checked = 'checked' %>
      <% last_year_checked = '' %>
    <% end %>
    <li><input type="radio" name="start" value="0" <%= all_time_checked %> > all time</li>
    <li><input type="radio" name="start" value="<%= (Time.now - 1.year).utc.to_i * 1000 %>" <%= last_year_checked %> > last year</li>
<% [90, 30, 7].each do |days| %>
    <li><input type="radio" name="start" value="<%= (Time.now - days.days).utc.to_i * 1000 %>"> last <%= days %> days</li>
<% end %>
  </ul>
</div>
</form>
</div>
</div>
<table class="module-data">
  <tr>
    <th></th>
    <% days_to_show = 7 %>
    <% (0..(days_to_show - 1)).each do |i| %>
      <% index = days_to_show - i - 1 %>
      <th><%= (@latest.record_date - (index).days).strftime "%b %e" %></th>
    <% end %>
    <th class="right">Avg Growth</th>
  </tr>
<% @repositories.each do |r| %>
  <tr>
    <td class="left"><a href="<%= r.url %>"><%= r.name %></a></td>
    <% recent = r.day_sequence(@latest.record_date - 6.days, 7) %>
    <% (0..(days_to_show - 1)).each do |i| %>
      <% index = - days_to_show + i %>
      <td><%= recent[index].try(:value) %></td>
    <% end %>
    <td class="right"><%= r.repository_stats.try(:modules_day).to_i %>/day</td>
  </tr>
<% end %>
</table>

<p>Data is collected by scraping the relevant websites once a day via
a cron job and then stored in a Postgresql database for later
retrieval. Growth rates are calculated by averaging data over the last
week. I'm gathering counts of separate modules, so multiple versions
of the same module/package/gem only count once (foo-1.2, foo-1.3 and
bar-1.0 would count as 2 total).
</p>
<p>(Jun 23, 2019) Update Crates.io, Julia, and LuaRocks after site changes. Also upgrade LOTS of ruby gems and get off a deprecated Heroku stack.
</p>
<p>(Jun 3, 2018) Update Drupal, DUB, and PyPI after their sites updated.
</p>
<p>(Mar 4, 2018) Added Crystal Shards, as well as JSON endpoints
  <tt>/repositories</tt> and <tt>/repositories/:id/counts/:start/:finish</tt>
  as first steps towards revamping JS front end. (e.g.&nbsp;<a href="/repositories/1/counts/2018-02-01/2018-02-28">/repositories/1/counts/2018-02-01/2018-02-28</a>)
<p>(Sept 10, 2017) Update Crates.io for their new data URL and add
Nimble, the Nim package manager. Many thanks to Alex Libman for pointing
me to it.
</p>
<p>I'd like to add more repositories. If you have suggestions, please send them
to erik@debill.org.
</p>
<p>
CPAN and CPAN (search) used to be two conflicting sources for data
about how many modules are in CPAN.  During spring of 2011 CPAN got a
site refresh and the numbers came into line with each other. It looks
funny on the graph, but it's an interesting bit of history.
</p>
<p>
GoDoc is weird. It's not a true package repository in the same sense
as all the others, but as far as I can tell it's the closest GoLang
has. Be aware that it pretty drastically overcounts the number of
packages. Don't use the raw numbers to compare with other
languages. You can still watch the line to see changes in velocity,
though.
</p>
<p>
If you'd like to check out the data in more detail, you are welcome to <a href="/modulecounts.csv">download</a> it in a CSV file.
</p>

